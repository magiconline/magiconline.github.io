<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>魔法张的Blog</title><link>https://magiconline.github.io/</link><description>Recent content on 魔法张的Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 11 May 2022 20:55:03 +0800</lastBuildDate><atom:link href="https://magiconline.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Go性能优化建议</title><link>https://magiconline.github.io/post/go-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE/</link><pubDate>Wed, 11 May 2022 20:55:03 +0800</pubDate><guid>https://magiconline.github.io/post/go-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE/</guid><description>高性能编程 时间性能优化 Slice 尽量预分配内存，减少append操作扩容的频率。 Slice扩容时会复制原数组到新数组。 可使用 go test --bench=. --benchmem 查看内存分配次数、分配容量。
Slice切片时不会新建数组，而是引用已有的数组。 可能导致一个小Slice切片自一个大Slice时，大Slice的内存不会被释放，可使用copy替代[:]操作。
map 与Slice相同，可通过提前分配内存，减少内存拷贝和Rehash的消耗。
字符串 字符串是不可变类型，使用的内存是固定的，每次用+都会重新分配内存。 使用strings.Builder拼接大量字符串，底层是[]bytes数组，不会每次都重新分配内存。 bytes.Buffer最后会重新创建一个新的字符串，因此稍慢。
还可以使用builder.Grow(n)提前分配内存，减少申请内存次数。
空间性能优化 使用空结构体节省内存 空结构体不占据任何内存空间，可作为各种场景下的占位符。
应用场景：map[int]struct{}，通过map实现了set。
多线程 线程安全 使用atomic包性能会比Mutex性能高。 因为Mutex通过操作系统实现，atomic操作通过硬件实现。
Mutex用来保护一段逻辑，atomic用来保护一个变量。
性能优化 性能优化原则 要依靠数据而不是猜测。 要定位最大瓶颈而不是细枝末节 不要过早优化 不要过度优化 性能分析工具 pprof 首页：http://localhost:6060/debug/pprof/
查看CPU go tool pprof -http=:8080 &amp;#34;http://localhost:6060/debug/pprof/profile?second=10&amp;#34; top list Eat web 查看堆内存 go tool pprof -http=:8080 &amp;#34;http:localhost:6060/debug/pprof/heap&amp;#34; 可切换当前/累计 内存/对象数据，查找未使用的内存。
goroutine go tool pprof -http=:8080 &amp;#34;http://localhost:6060/debug/pprof/goroutine&amp;#34; 通过graph或火焰图分析。
mutex go tool pprof -http=:8080 &amp;#34;http://localhost:6060/debug/pprof/mutex&amp;#34; block ThreadCreate pprof采样原理 CPU 在程序启动时，向操作系统加入一个10ms定时器。 到达时间后，记录一次CPU信息。 每100ms将记录写入输出流。</description></item><item><title>生成唯一ID的方式</title><link>https://magiconline.github.io/post/%E7%94%9F%E6%88%90%E5%94%AF%E4%B8%80id%E7%9A%84%E6%96%B9%E5%BC%8F/</link><pubDate>Mon, 09 May 2022 14:37:37 +0800</pubDate><guid>https://magiconline.github.io/post/%E7%94%9F%E6%88%90%E5%94%AF%E4%B8%80id%E7%9A%84%E6%96%B9%E5%BC%8F/</guid><description>ID生成的要求 全局唯一：
递增：数据库中的索引需要主键有序才能保证高性能
有序：满足事务、增量消息、排序等特殊需求
安全：不能为简单的连续ID，防止爬虫等
包含时间信息：可以根据ID提取时间信息
UUID 包含32个16进制数字，分为8-4-4-4-12的形式，性能高。 问题是UUID为无序数据，数据库插入性能差，作为主键过长。
数据库自增主键 基于redis INCR原子操作 雪花算法 按照时间有序生成，结果是64bit的整数。
结构：1bit符号位（一般为正数、固定为0），41bit时间戳（毫秒），10bit工作进程位（共1024个节点），12bit序列号（一个节点一毫秒内最多产生4096个ID）。
生成的ID按时间趋势递增。</description></item><item><title>Go语言上手-工程实践笔记</title><link>https://magiconline.github.io/post/go%E8%AF%AD%E8%A8%80%E4%B8%8A%E6%89%8B-%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0/</link><pubDate>Sun, 08 May 2022 16:56:52 +0800</pubDate><guid>https://magiconline.github.io/post/go%E8%AF%AD%E8%A8%80%E4%B8%8A%E6%89%8B-%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0/</guid><description>CSP(Communicating Sequential Processes, 通信顺序进程) 通过通信共享内存
ch := make(chan int, 10) ch &amp;lt;- 1 &amp;lt;-ch 通过共享内存实现通信 lock := sync.Mutex lock.Lock() lock.Unlock()</description></item><item><title>关于我的博客</title><link>https://magiconline.github.io/about/</link><pubDate>Sat, 07 May 2022 18:41:54 +0800</pubDate><guid>https://magiconline.github.io/about/</guid><description>Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.
Hugo makes use of a variety of open source projects including:
https://github.</description></item></channel></rss>